# coding: utf-8

"""
    Preorder Margin API

    API for estimating trade margins for orders

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MarginStructureComponent(BaseModel):
    """
    MarginStructureComponent
    """ # noqa: E501
    asset: Optional[StrictStr] = Field(default=None, description="Asset identifier")
    asset_type: Optional[StrictStr] = Field(default=None, alias="assetType")
    position: Optional[Union[StrictFloat, StrictInt]] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    crossrate: Optional[Union[StrictFloat, StrictInt]] = None
    leverage_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="leverageRate")
    margin: Optional[Union[StrictFloat, StrictInt]] = None
    conv_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="convMargin")
    extreme_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="extremeMargin")
    conv_extreme_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="convExtremeMargin")
    effective_qtty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="effectiveQtty")
    __properties: ClassVar[List[str]] = ["asset", "assetType", "position", "price", "currency", "crossrate", "leverageRate", "margin", "convMargin", "extremeMargin", "convExtremeMargin", "effectiveQtty"]

    @field_validator('asset_type')
    def asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['regular', 'order_short', 'order_long']):
            raise ValueError("must be one of enum values ('regular', 'order_short', 'order_long')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarginStructureComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarginStructureComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "assetType": obj.get("assetType"),
            "position": obj.get("position"),
            "price": obj.get("price"),
            "currency": obj.get("currency"),
            "crossrate": obj.get("crossrate"),
            "leverageRate": obj.get("leverageRate"),
            "margin": obj.get("margin"),
            "convMargin": obj.get("convMargin"),
            "extremeMargin": obj.get("extremeMargin"),
            "convExtremeMargin": obj.get("convExtremeMargin"),
            "effectiveQtty": obj.get("effectiveQtty")
        })
        return _obj


