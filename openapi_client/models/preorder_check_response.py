# coding: utf-8

"""
    Preorder Margin API

    API for estimating trade margins for orders

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.margin_structure import MarginStructure
from typing import Optional, Set
from typing_extensions import Self

class PreorderCheckResponse(BaseModel):
    """
    PreorderCheckResponse
    """ # noqa: E501
    margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required margin for the orders")
    free_money: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Available free money", alias="freeMoney")
    total_free_money: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total available free money", alias="totalFreeMoney")
    delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Margin change")
    commission_charge_account_id: Optional[StrictStr] = Field(default=None, description="Account ID for commission charges", alias="commissionChargeAccountId")
    expected_commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expected commission for the orders", alias="expectedCommission")
    new_orders_commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Commission for new orders", alias="newOrdersCommission")
    margin_check_passed: Optional[StrictBool] = Field(default=None, description="Whether the margin check passed", alias="marginCheckPassed")
    margin_structure: Optional[MarginStructure] = Field(default=None, alias="marginStructure")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="List of warnings if any")
    __properties: ClassVar[List[str]] = ["margin", "freeMoney", "totalFreeMoney", "delta", "commissionChargeAccountId", "expectedCommission", "newOrdersCommission", "marginCheckPassed", "marginStructure", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PreorderCheckResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of margin_structure
        if self.margin_structure:
            _dict['marginStructure'] = self.margin_structure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PreorderCheckResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "margin": obj.get("margin"),
            "freeMoney": obj.get("freeMoney"),
            "totalFreeMoney": obj.get("totalFreeMoney"),
            "delta": obj.get("delta"),
            "commissionChargeAccountId": obj.get("commissionChargeAccountId"),
            "expectedCommission": obj.get("expectedCommission"),
            "newOrdersCommission": obj.get("newOrdersCommission"),
            "marginCheckPassed": obj.get("marginCheckPassed"),
            "marginStructure": MarginStructure.from_dict(obj["marginStructure"]) if obj.get("marginStructure") is not None else None,
            "warnings": obj.get("warnings")
        })
        return _obj


