# coding: utf-8

"""
    Preorder Margin API

    API for estimating trade margins for orders

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.preorder_check_post_request import PreorderCheckPostRequest

class TestPreorderCheckPostRequest(unittest.TestCase):
    """PreorderCheckPostRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PreorderCheckPostRequest:
        """Test PreorderCheckPostRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PreorderCheckPostRequest`
        """
        model = PreorderCheckPostRequest()
        if include_optional:
            return PreorderCheckPostRequest(
                currency = 'EUR',
                orders_data = [
                    openapi_client.models.preorder_check_post_request_orders_data_inner.preorder_check_post_request_ordersData_inner(
                        price = 45.31, 
                        quantity = 89.25, 
                        symbol_id = 'EUR/USD.EXANTE', )
                    ],
                show_margin_structure = True
            )
        else:
            return PreorderCheckPostRequest(
                orders_data = [
                    openapi_client.models.preorder_check_post_request_orders_data_inner.preorder_check_post_request_ordersData_inner(
                        price = 45.31, 
                        quantity = 89.25, 
                        symbol_id = 'EUR/USD.EXANTE', )
                    ],
        )
        """

    def testPreorderCheckPostRequest(self):
        """Test PreorderCheckPostRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
