image: nexus.dev.zorg.sh:5000/xnt/build/npm:18

variables:
  OPENAPI_GENERATOR_VERSION: 7.9.0
  SPEC_FILE: openapi.yaml
  GIT_USER_EMAIL: "gitlab-ci@exante.eu"
  GIT_USER_NAME: "GitLab CI"
  ERLANG_BRANCH: erlang_server
  PYTHON_BRANCH: python_client
  GIT_REPOSITORY: "git@gitlab.exan.tech:erlang/premargo_api.git"
  MAIN_BRANCH: "master"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
      when: always
    - when: never

stages:
  - validate
  - extract_version
  - generate
  - swagger_ui
  - push

validate:
  stage: validate
  image: openapitools/openapi-generator-cli:v${OPENAPI_GENERATOR_VERSION}
  tags:
    - docker
  script:
    - java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar validate -i ${SPEC_FILE}
  rules:
    - when: always  # This job runs on every pipeline

extract_version:
  stage: extract_version
  tags:
    - docker
  script:
    - npm install js-yaml
    - VERSION=$(node -e "
      const yaml = require('js-yaml');
      const fs = require('fs');
      const spec = yaml.load(fs.readFileSync('${SPEC_FILE}', 'utf8'));
      console.log(spec.info.version);
      ")
    - echo "VERSION=${VERSION}" >> version.env
  artifacts:
    reports:
      dotenv: version.env
  rules:
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
      when: always
    - when: never

generate-erlang:
  stage: generate
  tags:
    - docker
  image: openapitools/openapi-generator-cli:v${OPENAPI_GENERATOR_VERSION}
  variables:
    GENERATOR_NAME: erlang-server
    OUTPUT_DIR: ./generated-erlang
    TEMPLATE_DIR: ./template/erlang-api
  script:
    - java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate
      -i ${SPEC_FILE}
      -g ${GENERATOR_NAME}
      -o ${OUTPUT_DIR}
      -c ./config.yaml
      --openapi-generator-ignore-list "src/openapi_auth.erl"
  artifacts:
    paths:
      - ${OUTPUT_DIR}
  dependencies:
    - validate
  rules:
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
      when: always
    - when: never

generate-python:
  stage: generate
  tags:
    - docker
  image: openapitools/openapi-generator-cli:v${OPENAPI_GENERATOR_VERSION}
  variables:
    GENERATOR_NAME: python
    OUTPUT_DIR: ./generated-python
  script:
    - java -jar /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate
      -i ${SPEC_FILE}
      -g ${GENERATOR_NAME}
      -o ${OUTPUT_DIR}
  artifacts:
    paths:
      - ${OUTPUT_DIR}
  dependencies:
    - validate
  rules:
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
      when: always
    - when: never

generate_swagger_ui:
  stage: swagger_ui
  tags:
    - docker
  needs:
    - generate-erlang
    - generate-python
  script:
    - cd generated-erlang
    - mkdir -p priv/swagger
    - cd priv/swagger
    - curl -L https://github.com/swagger-api/swagger-ui/archive/refs/tags/v5.11.8.tar.gz | tar xz --strip-components=2 swagger-ui-5.11.8/dist/
    - sed -i 's|"https://petstore.swagger.io/v2/swagger.json"|window.location.origin + "/api-docs/openapi.json"|g' swagger-initializer.js
    - rm -rf .git* *.md
    - cd ../..
  artifacts:
    paths:
      - generated-erlang/
  rules:
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
      when: always
    - when: never

push_erlang:
  stage: push
  image: bitnami/git:latest
  tags:
    - docker
  needs:
    - generate_swagger_ui
    - extract_version
  before_script:
    - git config --global user.email "${GIT_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME}"
    - mkdir -p $HOME/.ssh
    - chmod 700 $HOME/.ssh
  script:
    - ci/push_generated.sh generated-erlang ${ERLANG_BRANCH} erl ${VERSION}
  variables:
    GIT_STRATEGY: clone
    SSH_PRIVATE_KEY: ${SSH_PRIVATE_KEY}
  rules:
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
      when: always
    - when: never

push_python:
  stage: push
  tags:
    - docker
  image: bitnami/git:latest
  needs:
    - generate-python
    - extract_version
  before_script:
    - git config --global user.email "${GIT_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME}"
    - mkdir -p $HOME/.ssh
    - chmod 700 $HOME/.ssh
  script:
    - ci/push_generated.sh generated-python ${PYTHON_BRANCH} py ${VERSION}
  variables:
    GIT_STRATEGY: clone
    SSH_PRIVATE_KEY: ${SSH_PRIVATE_KEY}
  rules:
    - if: $CI_COMMIT_BRANCH == $MAIN_BRANCH
      when: always
    - when: never