image: openapitools/openapi-generator-cli:latest

stages:
  - validate
  - extract-version
  - generate
  - push

variables:
  OPENAPI_GENERATOR_VERSION: 6.6.0
  SPEC_FILE: pets.yaml
  GIT_USER_EMAIL: "gitlab-ci@exante.eu"
  GIT_USER_NAME: "GitLab CI"

validate-spec:
  stage: validate
  script:
    - openapi-generator-cli validate -i $SPEC_FILE

extract-version:
  stage: extract-version
  image: python:3.9-slim
  script:
    - pip install pyyaml
    - python -c "
import yaml
with open('$SPEC_FILE', 'r') as f:
    spec = yaml.safe_load(f)
    version = spec['info']['version']
    with open('version', 'w') as vf:
        vf.write(version)
"
  artifacts:
    paths:
      - version
  only:
    - main

generate-erlang:
  stage: generate
  variables:
    GENERATOR_NAME: erlang-server
    OUTPUT_DIR: ./generated-erlang
    TEMPLATE_DIR: ./template/erlang-api
  script:
    - openapi-generator-cli generate
      -i $SPEC_FILE
      -g $GENERATOR_NAME
      -o $OUTPUT_DIR
      -t $TEMPLATE_DIR
      --openapi-generator-ignore-list "src/openapi_auth.erl"
  artifacts:
    paths:
      - $OUTPUT_DIR
  only:
    - main
  dependencies:
    - extract-version

generate-python:
  stage: generate
  variables:
    GENERATOR_NAME: python
    OUTPUT_DIR: ./generated-python
  script:
    - openapi-generator-cli generate
      -i $SPEC_FILE
      -g $GENERATOR_NAME
      -o $OUTPUT_DIR
  artifacts:
    paths:
      - $OUTPUT_DIR
  only:
    - main
  dependencies:
    - extract-version

push-erlang-server:
  stage: push
  image: alpine:latest
  before_script:
    - apk add --no-cache git
    - git config --global user.email "$GIT_USER_EMAIL"
    - git config --global user.name "$GIT_USER_NAME"
  script:
    - VERSION=$(cat version)
    - git clone $CI_REPOSITORY_URL temp_repo
    - cd temp_repo
    - git checkout erlang_server_test || git checkout -b erlang_server_test
    - rm -rf ./*
    - cp -r ../generated-erlang/* .
    - git add .
    - git commit -m "Update generated Erlang server code from OpenAPI spec erl-${VERSION} [skip ci]"
    - git tag -a "erl-${VERSION}"
    - git push origin erlang_server_test
    - git push origin "erl-${VERSION}"
  only:
    - main
  dependencies:
    - generate-erlang
    - extract-version

push-python-client:
  stage: push
  image: alpine:latest
  before_script:
    - apk add --no-cache git
    - git config --global user.email "$GIT_USER_EMAIL"
    - git config --global user.name "$GIT_USER_NAME"
  script:
    - VERSION=$(cat version)
    - git clone $CI_REPOSITORY_URL temp_repo
    - cd temp_repo
    - git checkout python_client_test || git checkout -b python_client_test
    - rm -rf ./*
    - cp -r ../generated-python/* .
    - git add .
    - git commit -m "Update generated Python client code from OpenAPI spec py-${VERSION} [skip ci]"
    - git tag -a "py-${VERSION}"
    - git push origin python_client_test
    - git push origin "py-${VERSION}"
  only:
    - main
  dependencies:
    - generate-python
    - extract-version 